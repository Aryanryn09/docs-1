"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[4372],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var r=a.createContext({}),d=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(r.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,l=e.originalType,r=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(t),g=s,c=p["".concat(r,".").concat(g)]||p[g]||m[g]||l;return t?a.createElement(c,i(i({ref:n},u),{},{components:t})):a.createElement(c,i({ref:n},u))}));function c(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var l=t.length,i=new Array(l);i[0]=g;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o[p]="string"==typeof e?e:s,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=t(7462),s=(t(7294),t(3905));const l={sidebar_position:1},i="1.1 Install WasmEdge",o={unversionedId:"quick-start/install",id:"quick-start/install",title:"1.1 Install WasmEdge",description:"One liner Installation",source:"@site/docs/quick-start/install.md",sourceDirName:"quick-start",slug:"/quick-start/install",permalink:"/book/docs/quick-start/install",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quick-start/install.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/book/docs/category/quick-start"},next:{title:"1.2 Running simple apps",permalink:"/book/docs/quick-start/run"}},r={},d=[{value:"One liner Installation",id:"one-liner-installation",level:2},{value:"Install for all users",id:"install-for-all-users",level:2},{value:"Install plugins and extensions",id:"install-plugins-and-extensions",level:2},{value:"TensorFlow and Image Processing Extension",id:"tensorflow-and-image-processing-extension",level:3},{value:"WASI-NN plugin with OpenVINO\u2122 backend",id:"wasi-nn-plugin-with-openvino-backend",level:3},{value:"WASI-NN plugin with Pytorch backend",id:"wasi-nn-plugin-with-pytorch-backend",level:3},{value:"WASI-NN plugin with TensorFlow Lite",id:"wasi-nn-plugin-with-tensorflow-lite",level:3},{value:"Linux package managers (Fedora)",id:"linux-package-managers-fedora",level:2},{value:"Install the Specific Version of WasmEdge",id:"install-the-specific-version-of-wasmedge",level:2},{value:"What&#39;s Installed",id:"whats-installed",level:2},{value:"Uninstall",id:"uninstall",level:2},{value:"Trouble Shooting",id:"trouble-shooting",level:2}],u={toc:d};function p(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"11-install-wasmedge"},"1.1 Install WasmEdge"),(0,s.kt)("h2",{id:"one-liner-installation"},"One liner Installation"),(0,s.kt)("p",null,"The easiest way to install WasmEdge is to run the following command. Your system should have ",(0,s.kt)("inlineCode",{parentName:"p"},"git")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"curl")," as prerequisites."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash\n")),(0,s.kt)("p",null,"For ",(0,s.kt)("inlineCode",{parentName:"p"},"Windows 10"),", you could use Windows Package Manager Client (aka ",(0,s.kt)("inlineCode",{parentName:"p"},"winget.exe"),") to install WasmEdge with one single command in your terminal."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"winget install wasmedge\n")),(0,s.kt)("p",null,"Run the following command to make the installed binary available in the current session."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"source $HOME/.wasmedge/env\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"That's it!")," You can now ","[use WasmEdge from the CLI]",", or launch it from an application. To update WasmEdge to a new release, just re-run the above command to write over the old files."),(0,s.kt)("h2",{id:"install-for-all-users"},"Install for all users"),(0,s.kt)("p",null,"By default, WasmEdge is installed in the ",(0,s.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," directory. You can install it into a system directory, such as ",(0,s.kt)("inlineCode",{parentName:"p"},"/usr/local")," to make it available to all users. To specify an install directory, you can run the ",(0,s.kt)("inlineCode",{parentName:"p"},"install.sh")," script with the ",(0,s.kt)("inlineCode",{parentName:"p"},"-p")," flag. You will need to run the following commands as the ",(0,s.kt)("inlineCode",{parentName:"p"},"root")," user or ",(0,s.kt)("inlineCode",{parentName:"p"},"sudo")," since they write into system directories."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -p /usr/local\n")),(0,s.kt)("p",null,"Or, with all extensions:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -e all -p /usr/local\n")),(0,s.kt)("h2",{id:"install-plugins-and-extensions"},"Install plugins and extensions"),(0,s.kt)("p",null,"After you installed WasmEdge, you may want to use WasmEdge's more features. Then, we need to install the plugin and extensions for WasmEdge."),(0,s.kt)("h3",{id:"tensorflow-and-image-processing-extension"},"TensorFlow and Image Processing Extension"),(0,s.kt)("p",null,"If you would like to install WasmEdge with its ",(0,s.kt)("a",{parentName:"p",href:"https://www.secondstate.io/articles/wasi-tensorflow/"},"Tensorflow and image processing extensions"),", please run the following command. It will install WasmEdge with the ",(0,s.kt)("inlineCode",{parentName:"p"},"tensorflow")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"image")," extensions on your system. For the usage of those two extensions, please refer to ",(0,s.kt)("a",{parentName:"p",href:"/book/docs/rust/ai_inference/tensorflow"},"TensorFlow Inference in Rust")," chapter."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -e all\n")),(0,s.kt)("p",null,"Next, run ",(0,s.kt)("inlineCode",{parentName:"p"},"source $HOME/.wasmedge/env")," to make the installed binary available in the current session."),(0,s.kt)("p",null,"Then, go to ",(0,s.kt)("a",{parentName:"p",href:"/book/docs/rust/ai_inference/tensorflow"},"TensorFlow-lite in Rust chapter")," to see how to run AI inference with TensorFlow Lite."),(0,s.kt)("h3",{id:"wasi-nn-plugin-with-openvino-backend"},"WASI-NN plugin with OpenVINO\u2122 backend"),(0,s.kt)("p",null,"WASI-NN plugin is WasmEdge's implementation of the WASI-NN proposal."),(0,s.kt)("p",null,"Note, to use the WASI-NN plugin for WasmEdge, your OS should be at least ",(0,s.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04"),". The WasmEdge version should be at least ",(0,s.kt)("inlineCode",{parentName:"p"},"wasmedge 0.10.1")),(0,s.kt)("p",null,"First, install the OpenVINO dependency."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'export OPENVINO_VERSION="2021.4.582"\nexport OPENVINO_YEAR="2021"\ncurl -sSL https://apt.repos.intel.com/openvino/$OPENVINO_YEAR/GPG-PUB-KEY-INTEL-OPENVINO-$OPENVINO_YEAR | sudo gpg --dearmor > /usr/share/keyrings/GPG-PUB-KEY-INTEL-OPENVINO-$OPENVINO_YEAR.gpg\necho "deb [signed-by=/usr/share/keyrings/GPG-PUB-KEY-INTEL-OPENVINO-$OPENVINO_YEAR.gpg] https://apt.repos.intel.com/openvino/$OPENVINO_YEAR all main" | sudo tee /etc/apt/sources.list.d/intel-openvino-$OPENVINO_YEAR.list\nsudo apt update\nsudo apt install -y intel-openvino-runtime-ubuntu20-$OPENVINO_VERSION\nsource /opt/intel/openvino_2021/bin/setupvars.sh\nldconfig\n')),(0,s.kt)("p",null,"And then get WasmEdge and the WASI-NN plug-in with OpenVINO backend. The version of WasmEdge should be the same as wasi-nn-openvio verison."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sLO https://github.com/WasmEdge/WasmEdge/releases/download/{{ wasmedge_version }}/WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ntar -zxf WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nrm -f WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ncurl -sLO https://github.com/WasmEdge/WasmEdge/releases/download/{{ wasmedge_version }}/WasmEdge-plugin-wasi_nn-openvino-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ntar -zxf WasmEdge-plugin-wasi_nn-openvino-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nrm -f WasmEdge-plugin-wasi_nn-openvino-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nmv libwasmedgePluginWasiNN.so WasmEdge-{{ wasmedge_version }}-Linux/lib/wasmedge\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/lib\nexport PATH=$PATH:$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/bin\nexport WASMEDGE_PLUGIN_PATH=$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/lib/wasmedge\n")),(0,s.kt)("p",null,"Next, go to the ",(0,s.kt)("a",{parentName:"p",href:"/book/docs/rust/ai_inference/openvino"},"OpenVINO in Rust")," chapter to see how to run AI inference with OpenVINO."),(0,s.kt)("h3",{id:"wasi-nn-plugin-with-pytorch-backend"},"WASI-NN plugin with Pytorch backend"),(0,s.kt)("p",null,"Note, to use Pytorch, the WasmEdge version should be at least ",(0,s.kt)("inlineCode",{parentName:"p"},"0.11.2"),". The WASI-NN plugin for Pytorch supports both ",(0,s.kt)("inlineCode",{parentName:"p"},"manylinux2014")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ubuntu20.04"),"."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The one-liner WasmEdge installer would install the ",(0,s.kt)("inlineCode",{parentName:"p"},"manylinux2014")," version for Ubuntu. If you install WasmEdge with the installer or for the ",(0,s.kt)("inlineCode",{parentName:"p"},"manylinux2014")," version, you should get the ",(0,s.kt)("inlineCode",{parentName:"p"},"manylinux2014")," version plug-in and ",(0,s.kt)("inlineCode",{parentName:"p"},"libtorch"),".")),(0,s.kt)("p",null,"First, install the PyTorch dependency:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'export PYTORCH_VERSION="1.8.2"\ncurl -s -L -O --remote-name-all https://download.pytorch.org/libtorch/lts/1.8/cpu/libtorch-cxx11-abi-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip\nunzip -q "libtorch-cxx11-abi-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nrm -f "libtorch-cxx11-abi-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nexport LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/libtorch/lib\n')),(0,s.kt)("p",null,"And then get the WasmEdge and the WASI-NN plug-in with PyTorch backend. The version and platform of WasmEdge should be the same as ",(0,s.kt)("inlineCode",{parentName:"p"},"wasi-nn-pytorch"),"."),(0,s.kt)("p",null,"Let's take ",(0,s.kt)("inlineCode",{parentName:"p"},"ubuntu20.04")," as an example."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sLO https://github.com/WasmEdge/WasmEdge/releases/download/{{ wasmedge_version }}/WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ntar -zxf WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nrm -f WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ncurl -sLO https://github.com/WasmEdge/WasmEdge/releases/download/{{ wasmedge_version }}/WasmEdge-plugin-wasi_nn-pytorch-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ntar -zxf WasmEdge-plugin-wasi_nn-pytorch-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nrm -f WasmEdge-plugin-wasi_nn-pytorch-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nmv libwasmedgePluginWasiNN.so WasmEdge-{{ wasmedge_version }}-Linux/lib/wasmedge\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/lib\nexport PATH=$PATH:$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/bin\nexport WASMEDGE_PLUGIN_PATH=$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/lib/wasmedge\n")),(0,s.kt)("p",null,"Next, go to the ",(0,s.kt)("a",{parentName:"p",href:"/book/docs/rust/ai_inference/pytorch"},"Pytorch in Rust chapter")," to see how to run AI inference with Pytorch."),(0,s.kt)("h3",{id:"wasi-nn-plugin-with-tensorflow-lite"},"WASI-NN plugin with TensorFlow Lite"),(0,s.kt)("p",null,"The WASI-NN plugin for TensorFlow Lite supports both ",(0,s.kt)("inlineCode",{parentName:"p"},"manylinux2014"),",",(0,s.kt)("inlineCode",{parentName:"p"},"ubuntu20.04"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"android_aarch64"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"manylinux2014_aarch64"),". The version and platform of WasmEdge should be the same as WASI-NN plugin with TensorFlow lite."),(0,s.kt)("p",null,"First, install the TensorFlow-Lite dependency:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -s -L -O --remote-name-all https://github.com/second-state/WasmEdge-tensorflow-deps/releases/download/{{ wasmedge_version }}/WasmEdge-tensorflow-deps-TFLite-{{ wasmedge_version }}-manylinux2014_x86_64.tar.gz\ntar -zxf WasmEdge-tensorflow-deps-TFLite-{{ wasmedge_version }}-manylinux2014_x86_64.tar.gz\nrm -f WasmEdge-tensorflow-deps-TFLite-{{ wasmedge_version }}-manylinux2014_x86_64.tar.gz\n")),(0,s.kt)("p",null,"The shared library will be extracted in the current directory ",(0,s.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_c.so"),"."),(0,s.kt)("p",null,"Then you can move the library to the installation path:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mv libtensorflowlite_c.so /usr/local/lib\n")),(0,s.kt)("p",null,"Or set the environment variable ",(0,s.kt)("inlineCode",{parentName:"p"},"export LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH}"),"."),(0,s.kt)("p",null,"Get the WasmEdge and the WASI-NN plug-in with TensorFlow-Lite backend:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sLO https://github.com/WasmEdge/WasmEdge/releases/download/{{ wasmedge_version }}/WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ntar -zxf WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nrm -f WasmEdge-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ncurl -sLO https://github.com/WasmEdge/WasmEdge/releases/download/{{ wasmedge_version }}/WasmEdge-plugin-wasi_nn-tensorflowlite-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\ntar -zxf WasmEdge-plugin-wasi_nn-tensorflowlite-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nrm -f WasmEdge-plugin-wasi_nn-tensorflowlite-{{ wasmedge_version }}-ubuntu20.04_x86_64.tar.gz\nmv libwasmedgePluginWasiNN.so WasmEdge-{{ wasmedge_version }}-Linux/lib/wasmedge\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/lib\nexport PATH=$PATH:$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/bin\nexport WASMEDGE_PLUGIN_PATH=$(pwd)/WasmEdge-{{ wasmedge_version }}-Linux/lib/wasmedge\n")),(0,s.kt)("p",null,"Next, go to ",(0,s.kt)("a",{parentName:"p",href:"/book/docs/rust/ai_inference/tensorflow_lite"},"TensorFlow-lite in Rust chapter")," to see how to run AI inference with TensorFlow Lite."),(0,s.kt)("h2",{id:"linux-package-managers-fedora"},"Linux package managers (Fedora)"),(0,s.kt)("p",null,"WasmEdge now is an official package on Fedora 36, Fedora 37, Fedora 38, Fedora EPEL 8, and Fedora EPEL 9. Check out the stable version ",(0,s.kt)("a",{parentName:"p",href:"https://src.fedoraproject.org/rpms/wasmedge"},"here"),"."),(0,s.kt)("p",null,"To install WasmEdge on Fedora, using the following command line. For more usages, please check out Fedora docs. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"dnf install wasmedge\n")),(0,s.kt)("h2",{id:"install-the-specific-version-of-wasmedge"},"Install the Specific Version of WasmEdge"),(0,s.kt)("p",null,"The WasmEdge installer script will install the latest official release by default.\nYou could install the specific version of WasmEdge, including pre-releases or old releases by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"-v")," argument to the installer script. Here is an example."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -e all -v {{ wasmedge_version }}\n")),(0,s.kt)("p",null,"If you are interested in the latest builds from the ",(0,s.kt)("inlineCode",{parentName:"p"},"HEAD")," of the ",(0,s.kt)("inlineCode",{parentName:"p"},"master")," branch, which is basically WasmEdge's nightly builds, you can download the release package directly from our Github Action's CI artifact. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/actions/runs/2969775464#artifacts"},"Here is an example"),"."),(0,s.kt)("h2",{id:"whats-installed"},"What's Installed"),(0,s.kt)("p",null,"After installation, you have the following directories and files. Here we assume that you installed into the ",(0,s.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," directory. You could also change it to ",(0,s.kt)("inlineCode",{parentName:"p"},"/usr/local")," if you did a system-wide install.\nIf you used ",(0,s.kt)("inlineCode",{parentName:"p"},"winget")," to install WasmEdge, the files are located at ",(0,s.kt)("inlineCode",{parentName:"p"},"C:\\Program Files\\WasmEdge"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"$HOME/.wasmedge/bin")," directory contains the WasmEdge Runtime CLI executable files. You can copy and move them around on your file system.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedge")," tool is the standard WasmEdge runtime. You can use it from the CLI.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Execute a WASM file: ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedge --dir .:. app.wasm")))),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedgec")," tool is the ahead-of-time (AOT) compiler to compile a ",(0,s.kt)("inlineCode",{parentName:"li"},".wasm")," file into a native ",(0,s.kt)("inlineCode",{parentName:"li"},".so")," file (or ",(0,s.kt)("inlineCode",{parentName:"li"},".dylib")," on MacOS, ",(0,s.kt)("inlineCode",{parentName:"li"},".dll")," on Windows, or ",(0,s.kt)("inlineCode",{parentName:"li"},".wasm")," as the universal WASM format on all platforms). The ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedge")," can then execute the output file.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Compile a WASM file into a AOT-compiled WASM: ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedgec app.wasm app.so")),(0,s.kt)("li",{parentName:"ul"},"Execute the WASM in AOT mode: ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedge --dir .:. app.so")))),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedge-tensorflow"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"wasmedge-tensorflow-lite")," tools are runtimes that support the WasmEdge tensorflow extension."))),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"$HOME/.wasmedge/lib")," directory contains WasmEdge shared libraries, as well as dependency libraries. They are useful for WasmEdge SDKs to launch WasmEdge programs and functions from host applications."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"$HOME/.wasmedge/include")," directory contains the WasmEdge header files. They are useful for WasmEdge SDKs.")),(0,s.kt)("h2",{id:"uninstall"},"Uninstall"),(0,s.kt)("p",null,"To uninstall WasmEdge, you can run the following command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh)\n")),(0,s.kt)("p",null,"If the ",(0,s.kt)("inlineCode",{parentName:"p"},"wasmedge")," binary is not in ",(0,s.kt)("inlineCode",{parentName:"p"},"PATH")," and it wasn't installed in the default ",(0,s.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," folder, then you must provide the installation path."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh) -p /path/to/parent/folder\n")),(0,s.kt)("p",null,"If you wish to uninstall uninteractively, you can pass in the ",(0,s.kt)("inlineCode",{parentName:"p"},"--quick")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"-q")," flag."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh) -q\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If a parent folder of the ",(0,s.kt)("inlineCode",{parentName:"p"},"wasmedge")," binary contains ",(0,s.kt)("inlineCode",{parentName:"p"},".wasmedge"),", the folder will be considered for removal. For example, the script removes the default ",(0,s.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," folder altogether.")),(0,s.kt)("p",null,"If you used ",(0,s.kt)("inlineCode",{parentName:"p"},"winget")," to install WasmEdge, run the following command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"`winget` uninstall wasmedge\n")),(0,s.kt)("h2",{id:"trouble-shooting"},"Trouble Shooting"),(0,s.kt)("p",null,"Some users, especially in China, reported that they had encountered the Connection refused error when trying to download the ",(0,s.kt)("inlineCode",{parentName:"p"},"install.sh")," from the ",(0,s.kt)("inlineCode",{parentName:"p"},"githubusercontent.com"),"."),(0,s.kt)("p",null,"Please make sure your network connection can access the ",(0,s.kt)("inlineCode",{parentName:"p"},"github.com")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"githubusercontent.com")," via VPN."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# The error message\ncurl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash\ncurl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused\n")))}p.isMDXComponent=!0}}]);