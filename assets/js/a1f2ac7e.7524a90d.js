"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[165],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=n,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return a?r.createElement(k,s(s({ref:t},c),{},{components:a})):r.createElement(k,s({ref:t},c))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2105:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:2},s="Quick start with Docker",i={unversionedId:"getting-started/quick_start_docker",id:"getting-started/quick_start_docker",title:"Quick start with Docker",description:"In this guide, we will walk you through how to quickly build and run WasmEdge apps in Docker Desktop. There is no additional dependencies as the entire development and runtime environments are managed by Docker Desktop.",source:"@site/docs/getting-started/quick_start_docker.md",sourceDirName:"getting-started",slug:"/getting-started/quick_start_docker",permalink:"/book/docs/getting-started/quick_start_docker",draft:!1,editUrl:"https://github.com/alabulei1/book/docs/getting-started/quick_start_docker.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Quick start on Linux",permalink:"/book/docs/getting-started/quick_start"},next:{title:"Guide for Developing Wasm Applications",permalink:"/book/docs/intro"}},l={},p=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Build and run a Wasm app from Rust",id:"build-and-run-a-wasm-app-from-rust",level:2},{value:"Next steps",id:"next-steps",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"quick-start-with-docker"},"Quick start with Docker"),(0,n.kt)("p",null,"In this guide, we will walk you through how to quickly build and run WasmEdge apps in Docker Desktop. There is no additional dependencies as the entire development and runtime environments are managed by Docker Desktop."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"If you are not using Docker Desktop, ",(0,n.kt)("a",{parentName:"p",href:"/book/docs/getting-started/quick_start"},"get started here"),".")),(0,n.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,n.kt)("p",null,"You must have Docker Desktop 4.15+ installed.\nMake sure you have turned on the containerd image store feature in your Docker Desktop. "),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://i.imgur.com/AH0ITnc.png",alt:null})),(0,n.kt)("h2",{id:"build-and-run-a-wasm-app-from-rust"},"Build and run a Wasm app from Rust"),(0,n.kt)("p",null,"The Hello world example is a standalone Rust application that can be executed by the ",(0,n.kt)("a",{parentName:"p",href:"/book/docs/build-and-run/cli"},"WasmEdge CLI"),". Its source code and build instructions are available ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/second-state/rust-examples/tree/main/hello"},"here"),"."),(0,n.kt)("p",null,"The example uses the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/second-state/rust-examples/blob/main/hello/Dockerfile"},"Dockerfile")," to build the Wasm app and package it into an empty OCI container as follows. The total size of the container image of the application is around 500KB, and it is completely portable across OSes and platforms."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker buildx build --platform wasi/wasm -t secondstate/rust-example-hello .\n")),(0,n.kt)("p",null,"Next, use Docker to run the containerized Wasm app."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker run --rm --runtime=io.containerd.wasmedge.v1 --platform=wasi/wasm secondstate/rust-example-hello:latest\nHello WasmEdge!\n")),(0,n.kt)("h2",{id:"next-steps"},"Next steps"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-rust"},"Rust developer guides")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/second-state/rust-examples"},"Rust examples for WasmEdge")),(0,n.kt)("li",{parentName:"ul"},"Use Docker Compose to build and Rust-based microservices",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/docker/awesome-compose/tree/master/wasmedge-mysql-nginx"},"WasmEdge / MySQL / Nginx")," - Sample Wasm-based web application with a static HTML frontend, using a MySQL (MariaDB) database. The frontend connects to a Wasm microservice written in Rust, that runs using the WasmEdge runtime."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/docker/awesome-compose/tree/master/wasmedge-kafka-mysql"},"WasmEdge / Kafka / MySQL")," - Sample Wasm-based microservice that subscribes to a Kafka (Redpanda) queue topic, and transforms and saves any incoming message into a MySQL (MariaDB) database."))),(0,n.kt)("li",{parentName:"ul"},"Write Wasm apps in your favorite languages, like ",(0,n.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-rust"},"Rust"),", ",(0,n.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-cc"},"C/C++"),", ",(0,n.kt)("a",{parentName:"li",href:"/docs/category/developing-wasm-apps-in-javascript"},"JavaScript"),", ",(0,n.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-go"},"Go"),", and many other languages.")))}u.isMDXComponent=!0}}]);