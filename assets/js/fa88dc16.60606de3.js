"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[3345],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,h=c["".concat(o,".").concat(d)]||c[d]||m[d]||i;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5466:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2},l="1.2 Running simple apps",s={unversionedId:"quick-start/run",id:"quick-start/run",title:"1.2 Running simple apps",description:"In this chapter, you will learn how to use WasmEdge CLI to run wasm bytecode from Rust in two ways in 5 minutes.",source:"@site/docs/quick-start/run.md",sourceDirName:"quick-start",slug:"/quick-start/run",permalink:"/docs/quick-start/run",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quick-start/run.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"1.1 Install WasmEdge",permalink:"/docs/quick-start/install"},next:{title:"1.3 Using WasmEdge in Docker",permalink:"/docs/quick-start/use_docker"}},o={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"A simple main app",id:"a-simple-main-app",level:2},{value:"The code",id:"the-code",level:3},{value:"Build the Wasm bytecode",id:"build-the-wasm-bytecode",level:3},{value:"Run the compiled application from WasmEdge CLI",id:"run-the-compiled-application-from-wasmedge-cli",level:3},{value:"A simple function",id:"a-simple-function",level:2},{value:"The code",id:"the-code-1",level:3},{value:"build the Wasm Bytecode",id:"build-the-wasm-bytecode-1",level:3},{value:"Run the function",id:"run-the-function",level:3}],u={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"12-running-simple-apps"},"1.2 Running simple apps"),(0,r.kt)("p",null,"In this chapter, you will learn how to use WasmEdge CLI to run wasm bytecode from Rust in two ways in 5 minutes."),(0,r.kt)("p",null,"One example is running a simple main app, a standalone Wasm file. The other example is running a simple function, exported as ",(0,r.kt)("inlineCode",{parentName:"p"},"lib"),". Usually, the simple function is associated with a Host app. Go to Guide for Embedding Wasm Functions for more details."),(0,r.kt)("p",null,"Both examples in this chapter are written in Rust and compiled into Wasm bytecode."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/quick-start/install"},"WasmEdge installed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"Rust")," installed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wasm32-wasi")," target of the Rust toolchain added",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"rustup target add wasm32-wasi")," after installed Rust. ")))),(0,r.kt)("h2",{id:"a-simple-main-app"},"A simple main app"),(0,r.kt)("p",null,"The Hello world example is a standalone Rust application that can be executed by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/build-and-run/cli"},"WasmEdge CLI"),". Its source code is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasm-learning/blob/master/cli/hello/src/main.rs"},"here"),"."),(0,r.kt)("h3",{id:"the-code"},"The code"),(0,r.kt)("p",null,"The full source code for the Rust ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasm-learning/blob/master/cli/hello/src/main.rs"},"main.rs")," file is as follows. It echoes the command line arguments passed to this program at runtime."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'use std::env;\n\nfn main() {\n  println!("hello");\n  for argument in env::args().skip(1) {\n    println!("{}", argument);\n  }\n}\n')),(0,r.kt)("h3",{id:"build-the-wasm-bytecode"},"Build the Wasm bytecode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo build --target wasm32-wasi --release\n")),(0,r.kt)("h3",{id:"run-the-compiled-application-from-wasmedge-cli"},"Run the compiled application from WasmEdge CLI"),(0,r.kt)("p",null,"We will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge")," command to run the program."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ wasmedge target/wasm32-wasi/release/hello.wasm second state\nhello\nsecond\nstate\n")),(0,r.kt)("p",null,"Use the AoT compiler ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedgec")," to get much better performance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ wasmedgec target/wasm32-wasi/release/hello.wasm target/wasm32-wasi/release/hello.wasm\n$ wasmedge target/wasm32-wasi/release/hello.wasm second state\nhello\nsecond\nstate\n")),(0,r.kt)("h2",{id:"a-simple-function"},"A simple function"),(0,r.kt)("h3",{id:"the-code-1"},"The code"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasm-learning/tree/master/cli/add"},"add")," example is a Rust library function that can be executed by ",(0,r.kt)("strong",{parentName:"p"},"the ",(0,r.kt)("a",{parentName:"strong",href:"/docs/build-and-run/cli"},"WasmEdge CLI")," in the reactor mode"),"."),(0,r.kt)("p",null,"The full source code for the Rust ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasm-learning/blob/master/cli/add/src/lib.rs"},"lib.rs file")," is as follows. It provides a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"add()")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#[no_mangle]\npub fn add(a: i32, b: i32) -> i32 {\n  return a + b;\n}\n")),(0,r.kt)("h3",{id:"build-the-wasm-bytecode-1"},"build the Wasm Bytecode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo build --target wasm32-wasi --release\n")),(0,r.kt)("h3",{id:"run-the-function"},"Run the function"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge")," in reactor mode to run the program. We pass the function name and its input parameters as command line arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ wasmedge --reactor target/wasm32-wasi/release/add.wasm add 2 2\n4\n")),(0,r.kt)("p",null,"Use the AoT compiler ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedgec")," to get much better performance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ wasmedgec target/wasm32-wasi/release/add.wasm target/wasm32-wasi/release/add.wasm\n$ wasmedge target/wasm32-wasi/release/add.wasm add 2 2\n4\n")),(0,r.kt)("p",null,"Now you have the basic knowledge for running apps with WasmEdge."),(0,r.kt)("p",null,"Next, you can"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"check out all available ",(0,r.kt)("a",{parentName:"li",href:"/docs/build-and-run/cli"},"WasmEdge CLI options")," to explore WasmEdge's features"),(0,r.kt)("li",{parentName:"ul"},"write Wasm apps in your favorite languages, like ",(0,r.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-rust"},"Rust"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-cc"},"C/C++"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/category/developing-wasm-apps-in-javascript"},"JavaScript"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/category/develop-wasm-apps-in-go"},"Go"),", and many other laungages.")))}c.isMDXComponent=!0}}]);