"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[7834],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),u=r,h=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},i="6.4 SIMD",s={unversionedId:"develop/c/simd",id:"develop/c/simd",title:"6.4 SIMD",description:"128-bit packed Single Instruction Multiple Data (SIMD) instructions provide simultaneous computations over packed data in just one instruction. It's commonly used to improve performance for multimedia applications. With the SIMD proposal, the modules can benefit from using these commonly used instructions in modern hardware to gain more speedup.",source:"@site/docs/develop/c/simd.md",sourceDirName:"develop/c",slug:"/develop/c/simd",permalink:"/book/zh-Hans/develop/c/simd",draft:!1,editUrl:"https://github.com/alabulei1/book/docs/develop/c/simd.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"developSidebar",previous:{title:"6.3 Thread",permalink:"/book/zh-Hans/develop/c/threads"},next:{title:"Develop Wasm Apps in Go",permalink:"/book/zh-Hans/category/develop-wasm-apps-in-go"}},l={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Compile the C-SIMD application to Wasm-SIMD binary with emcc",id:"compile-the-c-simd-application-to-wasm-simd-binary-with-emcc",level:2},{value:"Run with WasmEdge",id:"run-with-wasmedge",level:2},{value:"Ahead-of-Time mode",id:"ahead-of-time-mode",level:2}],p={toc:m};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"64-simd"},"6.4 SIMD"),(0,r.kt)("h1",{id:"webassembly-simd-example-in-c"},"WebAssembly SIMD Example in C"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://webassembly.github.io/simd/core/syntax/instructions.html#simd-instructions"},"128-bit packed Single Instruction Multiple Data (SIMD)")," instructions provide simultaneous computations over packed data in just one instruction. It's commonly used to improve performance for multimedia applications. With the SIMD proposal, the modules can benefit from using these commonly used instructions in modern hardware to gain more speedup."),(0,r.kt)("p",null,"If you are interested in enabling the SIMD proposal will improve how much performance of the applications, please refer to our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasm32-wasi-benchmark/tree/simd"},"wasm32-wasi benchmark")," for more information.\nIn our benchmark, the Mandelbrot Set application can have ",(0,r.kt)("strong",{parentName:"p"},"2.65x")," speedup."),(0,r.kt)("p",null,"We modified the Mandelbrot Set example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasm32-wasi-benchmark/blob/master/src/mandelbrot.c"},"wasm32-wasi benchmark project"),". We will use this as an example in this article."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Before we started, make sure you have installed the following software:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"../build-and-run/install"},"Install WasmEdge"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Emscripten, a toolchain for compiling C/C++ to WebAssembly. Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/emscripten-core/emsdk"},"emcc official repository")," for the detailed instructions."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --depth 1 https://github.com/emscripten-core/emsdk.git\ncd emsdk\n./emsdk install latest\n./emsdk activate latest\nsource ./emsdk_env.sh\n")),(0,r.kt)("h2",{id:"compile-the-c-simd-application-to-wasm-simd-binary-with-emcc"},"Compile the C-SIMD application to Wasm-SIMD binary with emcc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"emcc -g -Oz --llvm-lto 1 -s STANDALONE_WASM -s INITIAL_MEMORY=32MB -s MAXIMUM_MEMORY=4GB \\\n  -mmutable-globals \\\n  -mnontrapping-fptoint \\\n  -msign-ext \\\n  mandelbrot-simd.c -o mandelbrot-simd.wasm\n")),(0,r.kt)("h2",{id:"run-with-wasmedge"},"Run with WasmEdge"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmedge mandelbrot-simd.wasm 15000\n")),(0,r.kt)("h2",{id:"ahead-of-time-mode"},"Ahead-of-Time mode"),(0,r.kt)("p",null,"With WasmEdge's AoT compiler, you will get higher performance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Compile wasm-simd with wasmedge aot compiler\n$ wasmedgec mandelbrot-simd.wasm mandelbrot-simd-out.wasm\n# Run the native binary with wasmedge\n$ wasmedge mandelbrot-simd-out.wasm 15000\n")))}c.isMDXComponent=!0}}]);